// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sharedtypes "github.com/T-V-N/gopherstore/internal/shared_types"
	mock "github.com/stretchr/testify/mock"
)

// UserApper is an autogenerated mock type for the UserApper type
type UserApper struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, uid
func (_m *UserApper) GetBalance(ctx context.Context, uid string) (sharedtypes.Balance, error) {
	ret := _m.Called(ctx, uid)

	var r0 sharedtypes.Balance
	if rf, ok := ret.Get(0).(func(context.Context, string) sharedtypes.Balance); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(sharedtypes.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, creds
func (_m *UserApper) Login(ctx context.Context, creds sharedtypes.Credentials) (string, error) {
	ret := _m.Called(ctx, creds)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, sharedtypes.Credentials) string); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sharedtypes.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, creds
func (_m *UserApper) Register(ctx context.Context, creds sharedtypes.Credentials) (string, error) {
	ret := _m.Called(ctx, creds)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, sharedtypes.Credentials) string); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sharedtypes.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, uid, orderID, amount
func (_m *UserApper) UpdateUser(ctx context.Context, uid string, orderID string, amount float32) error {
	ret := _m.Called(ctx, uid, orderID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float32) error); ok {
		r0 = rf(ctx, uid, orderID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawBalance provides a mock function with given fields: ctx, uid, orderID, amount
func (_m *UserApper) WithdrawBalance(ctx context.Context, uid string, orderID string, amount float32) error {
	ret := _m.Called(ctx, uid, orderID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float32) error); ok {
		r0 = rf(ctx, uid, orderID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserApper interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserApper creates a new instance of UserApper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserApper(t mockConstructorTestingTNewUserApper) *UserApper {
	mock := &UserApper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
