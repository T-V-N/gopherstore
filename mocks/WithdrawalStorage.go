// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sharedtypes "github.com/T-V-N/gopherstore/internal/shared_types"
	mock "github.com/stretchr/testify/mock"
)

// WithdrawalStorage is an autogenerated mock type for the WithdrawalStorage type
type WithdrawalStorage struct {
	mock.Mock
}

// ListWithdrawals provides a mock function with given fields: _a0, _a1
func (_m *WithdrawalStorage) ListWithdrawals(_a0 context.Context, _a1 string) ([]sharedtypes.Withdrawal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []sharedtypes.Withdrawal
	if rf, ok := ret.Get(0).(func(context.Context, string) []sharedtypes.Withdrawal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sharedtypes.Withdrawal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawBalance provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *WithdrawalStorage) WithdrawBalance(_a0 context.Context, _a1 string, _a2 string, _a3 float32, _a4 float32, _a5 float32) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float32, float32, float32) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWithdrawalStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewWithdrawalStorage creates a new instance of WithdrawalStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWithdrawalStorage(t mockConstructorTestingTNewWithdrawalStorage) *WithdrawalStorage {
	mock := &WithdrawalStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
